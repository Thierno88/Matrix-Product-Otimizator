Trabalho I INF1029
Luca Oliveira Lima - 2210831
Thierno Dia Oliveira - 2110844

Parte I:
A função scalar_matrix_mult foi implementada de maneira bem simples. Uma vez que era somente necessário percorrer a matriz pelas "rows", multiplicando o valor 
pelo float.

Já a função matrix_matrix_mult foi um pouco mais complexa, mas simples também. Para desenvolver o algoritmo otimizado assim como no escalar foi necessário 
percorrer pelas "rows". Primeiro inicializar a matriz nova com 0 em todas as posições e posteriormente percorrer a matriz pelas "rows" somando com o valor
das multiplicações. 

Parte II:
Para parte II nós fizemos um arquivo auxiliar .c para escrever as matrizes em .dat.

O arquivo matrix_lib_test.c foi implementado conforme sugerido no PDF de orientações do trabalho, inicializando, imprimindo e cronometrando como indicado.


1024 x 1024
Tempo execução escalar: 3.500000 ms
Tempo execução matriz: 5259.899902 ms
Tempo total de execução: 5303.149902 ms

2048 x 2048
Tempo execução escalar: 13.164000 ms
Tempo execução matriz: 45582.441406 ms
Tempo total de execução: 45715.105469 ms

Processador utilizado para esses resultados:
Architecture:            x86_64
  CPU op-mode(s):        32-bit, 64-bit
  Address sizes:         48 bits physical, 48 bits virtual
  Byte Order:            Little Endian
CPU(s):                  12
  On-line CPU(s) list:   0-11
Vendor ID:               AuthenticAMD
  Model name:            AMD Ryzen 5 3600X 6-Core Processor
    CPU family:          23
    Model:               113
    Thread(s) per core:  2
    Core(s) per socket:  6
    Socket(s):           1
    Stepping:            0
    BogoMIPS:            7585.79
    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse ss
                         e2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl tsc_reliable nons
                         top_tsc cpuid extd_apicid pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx
                          f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch o
                         svw topoext perfctr_core ssbd ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap c
                         lflushopt clwb sha_ni xsaveopt xsavec xgetbv1 clzero xsaveerptr arat npt nrip_save tsc_scale vm
                         cb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload umip rdpid
Virtualization features:
  Virtualization:        AMD-V
  Hypervisor vendor:     Microsoft
  Virtualization type:   full
Caches (sum of all):
  L1d:                   192 KiB (6 instances)
  L1i:                   192 KiB (6 instances)
  L2:                    3 MiB (6 instances)
  L3:                    16 MiB (1 instance)
Vulnerabilities:
  Gather data sampling:  Not affected
  Itlb multihit:         Not affected
  L1tf:                  Not affected
  Mds:                   Not affected
  Meltdown:              Not affected
  Mmio stale data:       Not affected
  Retbleed:              Mitigation; untrained return thunk; SMT enabled with STIBP protection
  Spec rstack overflow:  Mitigation; safe RET
  Spec store bypass:     Mitigation; Speculative Store Bypass disabled via prctl and seccomp
  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization
  Spectre v2:            Mitigation; Retpolines, IBPB conditional, STIBP always-on, RSB filling, PBRSB-eIBRS Not affecte
                         d
  Srbds:                 Not affected
  Tsx async abort:       Not affected